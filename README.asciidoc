= Atomicapp 
Atomicapp is a reference implementation of the Nulecule Specification. It can be used to bootstrap container application and to install and run them.

== Introduction

Please take a look at the https://gitbub.com/projectatomic/nulecule[Nulecule Specification]. If you are interested in taking a look at some well documented examples, feel free to browse thru https://github.com/projectatomic/atomicapp-examples/[Atomicapp].

== How To

First of all, cone the github repository: `git clone https://github.com/projectatomic/atomicapp`.

=== Install this project
Simply run

```
python setup.py install
```

If you want to do some changes to the code, I suggest to do:

```
cd atomicapp
export PYTHONPATH=`pwd`/atomicapp:$PYTHONPATH
alias atomicapp="`pwd`/atomicapp/cli/main.py"
```

=== Create
```
atomicapp [--dry-run] create --schema PATH|URL APP_NAME
```

Constructs directory structure and fills Atomicfile with application name and id.

=== Build
```
atomicapp [--dry-run] build [TAG]
```

Calls Docker build to package up the application and tags the resulting image.

=== Install and Run
```
atomicapp [--dry-run] [-a answers.conf] install|run [--recursive] [--update] [--path PATH] APP|PATH 
```

Pulls the application and it's dependencies. If the last argument is existing path, it looks for Atomicfile there instead of pulling anything.

* `--recursive yes|no` Pull whole dependency tree
* `--update` Overwrite any existing files
* `--path PATH` Unpack the application into given directory instead of current directory

Action `run` performs `install` prior it's own tasks are executed. When `run` is selected, providers' code is invoked and containers are deployed.

== Providers

Providers represent various deployment targets. They are based on yapsy plugin system and can be added by implementing interface explained in [Providers](providers/README.md)

== Dependencies

As of Version 0.0.1 Atomicapp uses https://docs.python.org/2/[Python
2.7.5] and https://github.com/bkabrda/anymarkup[Anymarkup].
